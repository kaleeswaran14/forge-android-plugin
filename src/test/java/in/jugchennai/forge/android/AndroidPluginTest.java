/*
* Copyright 2013 JUGChennai
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package in.jugchennai.forge.android;

/**
 * 
 * <b>Contributors</b>
 * 
 * @author Rajmahendra Hegde <rajmahendra@gmail.com>
 * @author Arivazhagan Ambigapathi <arivu86@gmail.com>
 *
 */

import static junit.framework.Assert.assertNotNull;
import static junit.framework.Assert.assertTrue;

import java.io.File;

import javax.inject.Inject;

import junit.framework.Assert;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.forge.parser.xml.Node;
import org.jboss.forge.parser.xml.XMLParser;
import org.jboss.forge.project.Project;
import org.jboss.forge.project.dependencies.DependencyResolver;
import org.jboss.forge.project.facets.ResourceFacet;
import org.jboss.forge.resources.DirectoryResource;
import org.jboss.forge.resources.FileResource;
import org.jboss.forge.test.AbstractShellTest;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.junit.Before;
import org.junit.Test;

public class AndroidPluginTest extends AbstractShellTest {
	  @Inject
	    private DependencyResolver resolver;
	  	String [][] valuecommands = {{"string_add","color_add","dimens_add"},{"android string-add --name test --value testvalue",
	  		"android color-add --name test --hexvalue #ccfff","android dimens-add --name test --pixel 50dp"}};
	  	

	    @Deployment
	    public static JavaArchive getDeployment() {
	        return AbstractShellTest.getDeployment().addPackages(true, AndroidPlugin.class.getPackage());
	    }

	    private Project initializeAndriodFacesProject() throws Exception {
	        Project p = initializeJavaProject();
	        getShell().execute("android setup");
	        return p;
	    }

	    @Test
	    public void setupTest() throws Exception {
	    	initializeAndriodFacesProject();
	        final Project project = initializeAndriodFacesProject();
	        assertNotNull(resolver);
	        assertNotNull(project.hasFacet(AndroidFacet.class));

	    }
	    
	    /*
	     * Check is all the values xml files is generated by "andriod setup"
	     * */
	    @Test
	    public void isvalueFolderInRes() throws Exception {
	    	final Project project = initializeAndriodFacesProject();
	    	DirectoryResource projectRoot = project.getProjectRoot();
	    	DirectoryResource resDirectory = projectRoot.getOrCreateChildDirectory("res");
	    	DirectoryResource valuesDirectory = resDirectory.getOrCreateChildDirectory("values");
	        assertTrue(valuesDirectory.getChild("strings.xml").exists());
	        assertTrue(valuesDirectory.getChild("color.xml").exists());
	        assertTrue(valuesDirectory.getChild("dimens.xml").exists());
	    }
	    
	    	    
	    /*
	     * Check String name in xml files that created by string-add
	     * */
	    @Test
	    public void stringCommandTest() throws Exception {
	    	final Project project = initializeAndriodFacesProject();
	    	FileResource<?> stringFile = project.getProjectRoot().getChildOfType(FileResource.class, "res/values/strings.xml");
	    	getShell().execute("android string-add --name test --value testvalue");
	        if(stringFile.exists()) {
		        Node node = XMLParser.parse(stringFile.getResourceInputStream());
	    		Node noderes = node.getOrCreate("resources");
	    			for(Node tempres : noderes.getChildren()){
	    				if(tempres.getAttribute("name").equals("test"))
	    				{
	    					Assert.assertEquals(tempres.getAttribute("name"), "test");
	    				}
	    		}
		    }
	    }
	    
	    /*
	     * Check Color name in xml files that created by color-add
	     * */
	    @Test
	    public void colorCommandTest() throws Exception {
	    	final Project project = initializeAndriodFacesProject();
	    	FileResource<?> colorFile = project.getProjectRoot().getChildOfType(FileResource.class, "res/values/color.xml");
	    	getShell().execute("android color-add --name test2 --hexvalue #ccfff");
	        if(colorFile.exists()) {
		        Node node = XMLParser.parse(colorFile.getResourceInputStream());
	    		Node noderes = node.getOrCreate("resources");
	    			for(Node tempres : noderes.getChildren()){
	    				if(tempres.getAttribute("name").equals("test"))
	    				{
	    					Assert.assertEquals(tempres.getAttribute("name"), "test");
	    				}
	    		}
		    }
	    }
	    
	    /*
	     * Check Dimens name in xml files that created by dimens-add
	     * */
	    @Test
	    public void dimensCommandTest() throws Exception {
	    	final Project project = initializeAndriodFacesProject();
	    	FileResource<?> dimensFile = project.getProjectRoot().getChildOfType(FileResource.class, "res/values/dimens.xml");
	    	getShell().execute("android dimens-add --name test --pixel 50dp");
	        if(dimensFile.exists()) {
		        Node node = XMLParser.parse(dimensFile.getResourceInputStream());
	    		Node noderes = node.getOrCreate("resources");
	    			for(Node tempres : noderes.getChildren()){
	    				if(tempres.getAttribute("name").equals("test"))
	    				{
	    					Assert.assertEquals(tempres.getAttribute("name"), "test");
	    				}
	    		}
		    }
	    }
	    
}

